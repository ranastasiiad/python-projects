import sqlite3
import argparse


db = sqlite3.connect('food_blog.db')
sql = db.cursor()
sql.execute("PRAGMA foreign_keys = ON;")
db.commit()


data = {"meals": ("breakfast", "brunch", "lunch", "supper"),
        "ingredients": ("milk", "cacao", "strawberry", "blueberry", "blackberry", "sugar"),
        "measures": ("ml", "g", "l", "cup", "tbsp", "tsp", "dsp", "")}


parser = argparse.ArgumentParser(description="This program prints recipes consisting of the ingredients you provide.")
parser.add_argument("db")
parser.add_argument("--ingredients")
parser.add_argument("--meals")
args = parser.parse_args()
if args.ingredients is not None:
    ingredients = args.ingredients.split(",")
    meals = args.meals.split(",")

    recipes_m = set()
    for i in range(len(meals)):
        meal_name_needed = meals[i]
        recipes_m_list = sql.execute('SELECT recipe_id FROM serve WHERE meal_id IN (SELECT meal_id FROM meals WHERE meal_name = ? );', (meal_name_needed, )).fetchall()
        for j in recipes_m_list:
            recipes_m.add(j[0])

    recipes_i = {}
    for i in range(len(ingredients)):
        ing_name_needed = ingredients[i]
        recipes_i_list = sql.execute('SELECT recipe_id FROM quantity WHERE ingredient_id = (SELECT ingredient_id FROM ingredients WHERE ingredient_name = ?);', (ing_name_needed, )).fetchall()
        ing_set = set()
        for j in recipes_i_list:
            ing_set.add(j[0])
        recipes_i[i] = ing_set

    all_recipes_id = set()
    all_recipes_id_list = sql.execute('SELECT recipe_id FROM recipes;').fetchall()
    for i in all_recipes_id_list:
        all_recipes_id.add(i[0])

    for i in recipes_i.values():
        all_recipes_id = all_recipes_id.intersection(i)

    recipes_needed = recipes_m.intersection(all_recipes_id)
    final_list = []
    for i in range(len(recipes_needed)):
        recipe_id_ = list(recipes_needed)[i]
        recipes_name_needed = sql.execute('SELECT recipe_name FROM recipes WHERE recipe_id = ?;', (recipe_id_, )).fetchall()
        final_list.append(recipes_name_needed[0][0])
    if len(final_list) == 0:
        print("There are no such recipes in the database")
    else:
        print(final_list)

else:
    # creation of tables
    sql.execute("CREATE TABLE IF NOT EXISTS meals (meal_id INTEGER PRIMARY KEY, meal_name TEXT UNIQUE NOT NULL);")
    sql.execute("CREATE TABLE IF NOT EXISTS ingredients (ingredient_id INTEGER PRIMARY KEY, ingredient_name TEXT UNIQUE NOT NULL);")
    sql.execute("CREATE TABLE IF NOT EXISTS measures (measure_id INTEGER PRIMARY KEY, measure_name TEXT UNIQUE);")
    sql.execute("CREATE TABLE IF NOT EXISTS recipes (recipe_id INTEGER PRIMARY KEY, recipe_name TEXT NOT NULL, recipe_description TEXT);")
    sql.execute("CREATE TABLE IF NOT EXISTS serve (serve_id INTEGER PRIMARY KEY, recipe_id INTEGER NOT NULL, meal_id INTEGER NOT NULL, FOREIGN KEY(recipe_id) REFERENCES recipes (recipe_id), FOREIGN KEY(meal_id) REFERENCES meals (meal_id));")
    sql.execute("CREATE TABLE IF NOT EXISTS quantity (quantity_id INTEGER PRIMARY KEY, measure_id INTEGER NOT NULL, ingredient_id INTEGER NOT NULL, quantity INTEGER NOT NULL, recipe_id INTEGER NOT NULL, FOREIGN KEY(measure_id) REFERENCES measures (measure_id), FOREIGN KEY(ingredient_id) REFERENCES ingredients (ingredient_id), FOREIGN KEY(recipe_id) REFERENCES recipes (recipe_id)) ")
    db.commit()
    # insertion of initial information
    for key, value in data.items():
        n = 0
        for n, v in enumerate(value):
            n += 1
            sql.execute(f"INSERT INTO {key} VALUES (?, ?);", (n, v))
            db.commit()
    # communication with the user
    print("Pass the empty recipe name to exit")
    recipe_name = input("Recipe name: ")
    while recipe_name != "":
        recipe_description = input("Recipe description: ")
        recipe_id_auto = sql.execute("INSERT INTO recipes (recipe_name, recipe_description) VALUES (?, ?);", (recipe_name, recipe_description, )).lastrowid
        db.commit()
        rows_number = sql.execute("SELECT COUNT(meal_id) FROM meals").fetchone()
        available_meals = sql.execute("SELECT meal_id, meal_name FROM meals")
        l_data = []
        for i in range(rows_number[0]):
            t_data = available_meals.fetchone()
            s_data = f"{str(t_data[0])}) {t_data[1]}"
            l_data.append(s_data)
        print(' '.join(l_data))
        meal_time = input("When the dish can be served: ")
        meal_time_list = meal_time.split(' ')
        for i in meal_time_list:
            row = int(i)
            sql.execute("INSERT INTO serve (meal_id, recipe_id) VALUES (?, ?);", (row, recipe_id_auto,))
            db.commit()
        ingredients_info = input("Input quantity of ingredient <press enter to stop>: ")
        while ingredients_info != "":
            ingredients_info_list = ingredients_info.split(' ')
            if len(ingredients_info_list) != 3:
                ingredients_info_list.insert(1, "")
            if ingredients_info_list[1] == "t":
                print("The measure is not conclusive!")
            else:
                if ingredients_info_list[2] == "berry":
                    print("The ingredient is not conclusive!")

                else:
                    if ingredients_info_list[2] == "straw":
                        ingredients_info_list[2] = "strawberry"
                    elif ingredients_info_list[2] == "black":
                        ingredients_info_list[2] = "blackberry"
                    elif ingredients_info_list[2] == "blue":
                        ingredients_info_list[2] = "blueberry"
                    measure_id_auto = sql.execute("SELECT measure_id FROM measures WHERE measure_name = ?;", (ingredients_info_list[1],)).fetchone()
                    ingredient_id_auto = sql.execute("SELECT ingredient_id FROM ingredients WHERE ingredient_name = ?;", (ingredients_info_list[2],)).fetchone()
                    sql.execute("INSERT INTO quantity (quantity, recipe_id, measure_id, ingredient_id) VALUES (?, ?, ?, ?);", (int(ingredients_info_list[0]), recipe_id_auto, measure_id_auto[0], ingredient_id_auto[0], ))
                    db.commit()
            ingredients_info = input("Input quantity of ingredient <press enter to stop>: ")
        recipe_name = input("Recipe name: ")
    db.close()
